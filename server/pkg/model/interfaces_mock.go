// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -package model -source interfaces.go -destination interfaces_mock.go
//

// Package model is a generated GoMock package.
package model

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockItemReader is a mock of ItemReader interface.
type MockItemReader struct {
	ctrl     *gomock.Controller
	recorder *MockItemReaderMockRecorder
	isgomock struct{}
}

// MockItemReaderMockRecorder is the mock recorder for MockItemReader.
type MockItemReaderMockRecorder struct {
	mock *MockItemReader
}

// NewMockItemReader creates a new mock instance.
func NewMockItemReader(ctrl *gomock.Controller) *MockItemReader {
	mock := &MockItemReader{ctrl: ctrl}
	mock.recorder = &MockItemReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemReader) EXPECT() *MockItemReaderMockRecorder {
	return m.recorder
}

// GetAllItems mocks base method.
func (m *MockItemReader) GetAllItems() (*[]Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems")
	ret0, _ := ret[0].(*[]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockItemReaderMockRecorder) GetAllItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockItemReader)(nil).GetAllItems))
}

// GetItem mocks base method.
func (m *MockItemReader) GetItem(conds ...any) (*Item, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemReaderMockRecorder) GetItem(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemReader)(nil).GetItem), conds...)
}

// GetItems mocks base method.
func (m *MockItemReader) GetItems(conds ...any) (*[]Item, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItems", varargs...)
	ret0, _ := ret[0].(*[]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockItemReaderMockRecorder) GetItems(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockItemReader)(nil).GetItems), conds...)
}

// MockItemWriter is a mock of ItemWriter interface.
type MockItemWriter struct {
	ctrl     *gomock.Controller
	recorder *MockItemWriterMockRecorder
	isgomock struct{}
}

// MockItemWriterMockRecorder is the mock recorder for MockItemWriter.
type MockItemWriterMockRecorder struct {
	mock *MockItemWriter
}

// NewMockItemWriter creates a new mock instance.
func NewMockItemWriter(ctrl *gomock.Controller) *MockItemWriter {
	mock := &MockItemWriter{ctrl: ctrl}
	mock.recorder = &MockItemWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemWriter) EXPECT() *MockItemWriterMockRecorder {
	return m.recorder
}

// CreateOrUpdateItem mocks base method.
func (m *MockItemWriter) CreateOrUpdateItem(item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateItem indicates an expected call of CreateOrUpdateItem.
func (mr *MockItemWriterMockRecorder) CreateOrUpdateItem(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateItem", reflect.TypeOf((*MockItemWriter)(nil).CreateOrUpdateItem), item)
}

// RemoveItem mocks base method.
func (m *MockItemWriter) RemoveItem(itemId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockItemWriterMockRecorder) RemoveItem(itemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockItemWriter)(nil).RemoveItem), itemId)
}

// RemoveTagFromItem mocks base method.
func (m *MockItemWriter) RemoveTagFromItem(itemId, tagId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagFromItem", itemId, tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagFromItem indicates an expected call of RemoveTagFromItem.
func (mr *MockItemWriterMockRecorder) RemoveTagFromItem(itemId, tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagFromItem", reflect.TypeOf((*MockItemWriter)(nil).RemoveTagFromItem), itemId, tagId)
}

// UpdateItem mocks base method.
func (m *MockItemWriter) UpdateItem(item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemWriterMockRecorder) UpdateItem(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemWriter)(nil).UpdateItem), item)
}

// MockItemReaderWriter is a mock of ItemReaderWriter interface.
type MockItemReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockItemReaderWriterMockRecorder
	isgomock struct{}
}

// MockItemReaderWriterMockRecorder is the mock recorder for MockItemReaderWriter.
type MockItemReaderWriterMockRecorder struct {
	mock *MockItemReaderWriter
}

// NewMockItemReaderWriter creates a new mock instance.
func NewMockItemReaderWriter(ctrl *gomock.Controller) *MockItemReaderWriter {
	mock := &MockItemReaderWriter{ctrl: ctrl}
	mock.recorder = &MockItemReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemReaderWriter) EXPECT() *MockItemReaderWriterMockRecorder {
	return m.recorder
}

// CreateOrUpdateItem mocks base method.
func (m *MockItemReaderWriter) CreateOrUpdateItem(item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateItem indicates an expected call of CreateOrUpdateItem.
func (mr *MockItemReaderWriterMockRecorder) CreateOrUpdateItem(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateItem", reflect.TypeOf((*MockItemReaderWriter)(nil).CreateOrUpdateItem), item)
}

// GetAllItems mocks base method.
func (m *MockItemReaderWriter) GetAllItems() (*[]Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllItems")
	ret0, _ := ret[0].(*[]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllItems indicates an expected call of GetAllItems.
func (mr *MockItemReaderWriterMockRecorder) GetAllItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllItems", reflect.TypeOf((*MockItemReaderWriter)(nil).GetAllItems))
}

// GetItem mocks base method.
func (m *MockItemReaderWriter) GetItem(conds ...any) (*Item, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemReaderWriterMockRecorder) GetItem(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemReaderWriter)(nil).GetItem), conds...)
}

// GetItems mocks base method.
func (m *MockItemReaderWriter) GetItems(conds ...any) (*[]Item, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItems", varargs...)
	ret0, _ := ret[0].(*[]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockItemReaderWriterMockRecorder) GetItems(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockItemReaderWriter)(nil).GetItems), conds...)
}

// RemoveItem mocks base method.
func (m *MockItemReaderWriter) RemoveItem(itemId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItem", itemId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockItemReaderWriterMockRecorder) RemoveItem(itemId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockItemReaderWriter)(nil).RemoveItem), itemId)
}

// RemoveTagFromItem mocks base method.
func (m *MockItemReaderWriter) RemoveTagFromItem(itemId, tagId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagFromItem", itemId, tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagFromItem indicates an expected call of RemoveTagFromItem.
func (mr *MockItemReaderWriterMockRecorder) RemoveTagFromItem(itemId, tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagFromItem", reflect.TypeOf((*MockItemReaderWriter)(nil).RemoveTagFromItem), itemId, tagId)
}

// UpdateItem mocks base method.
func (m *MockItemReaderWriter) UpdateItem(item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemReaderWriterMockRecorder) UpdateItem(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemReaderWriter)(nil).UpdateItem), item)
}

// MockTagReader is a mock of TagReader interface.
type MockTagReader struct {
	ctrl     *gomock.Controller
	recorder *MockTagReaderMockRecorder
	isgomock struct{}
}

// MockTagReaderMockRecorder is the mock recorder for MockTagReader.
type MockTagReaderMockRecorder struct {
	mock *MockTagReader
}

// NewMockTagReader creates a new mock instance.
func NewMockTagReader(ctrl *gomock.Controller) *MockTagReader {
	mock := &MockTagReader{ctrl: ctrl}
	mock.recorder = &MockTagReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagReader) EXPECT() *MockTagReaderMockRecorder {
	return m.recorder
}

// GetAllTags mocks base method.
func (m *MockTagReader) GetAllTags() (*[]Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags")
	ret0, _ := ret[0].(*[]Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockTagReaderMockRecorder) GetAllTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagReader)(nil).GetAllTags))
}

// GetTag mocks base method.
func (m *MockTagReader) GetTag(conds ...any) (*Tag, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTag", varargs...)
	ret0, _ := ret[0].(*Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagReaderMockRecorder) GetTag(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagReader)(nil).GetTag), conds...)
}

// GetTags mocks base method.
func (m *MockTagReader) GetTags(conds ...any) (*[]Tag, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*[]Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockTagReaderMockRecorder) GetTags(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockTagReader)(nil).GetTags), conds...)
}

// MockTagWriter is a mock of TagWriter interface.
type MockTagWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTagWriterMockRecorder
	isgomock struct{}
}

// MockTagWriterMockRecorder is the mock recorder for MockTagWriter.
type MockTagWriterMockRecorder struct {
	mock *MockTagWriter
}

// NewMockTagWriter creates a new mock instance.
func NewMockTagWriter(ctrl *gomock.Controller) *MockTagWriter {
	mock := &MockTagWriter{ctrl: ctrl}
	mock.recorder = &MockTagWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagWriter) EXPECT() *MockTagWriterMockRecorder {
	return m.recorder
}

// CreateOrUpdateTag mocks base method.
func (m *MockTagWriter) CreateOrUpdateTag(tag *Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateTag indicates an expected call of CreateOrUpdateTag.
func (mr *MockTagWriterMockRecorder) CreateOrUpdateTag(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateTag", reflect.TypeOf((*MockTagWriter)(nil).CreateOrUpdateTag), tag)
}

// RemoveTag mocks base method.
func (m *MockTagWriter) RemoveTag(tagId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTag", tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTag indicates an expected call of RemoveTag.
func (mr *MockTagWriterMockRecorder) RemoveTag(tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockTagWriter)(nil).RemoveTag), tagId)
}

// RemoveTagImageFromTag mocks base method.
func (m *MockTagWriter) RemoveTagImageFromTag(tagId, imageId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagImageFromTag", tagId, imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagImageFromTag indicates an expected call of RemoveTagImageFromTag.
func (mr *MockTagWriterMockRecorder) RemoveTagImageFromTag(tagId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagImageFromTag", reflect.TypeOf((*MockTagWriter)(nil).RemoveTagImageFromTag), tagId, imageId)
}

// UpdateTag mocks base method.
func (m *MockTagWriter) UpdateTag(tag *Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagWriterMockRecorder) UpdateTag(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagWriter)(nil).UpdateTag), tag)
}

// MockTagReaderWriter is a mock of TagReaderWriter interface.
type MockTagReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTagReaderWriterMockRecorder
	isgomock struct{}
}

// MockTagReaderWriterMockRecorder is the mock recorder for MockTagReaderWriter.
type MockTagReaderWriterMockRecorder struct {
	mock *MockTagReaderWriter
}

// NewMockTagReaderWriter creates a new mock instance.
func NewMockTagReaderWriter(ctrl *gomock.Controller) *MockTagReaderWriter {
	mock := &MockTagReaderWriter{ctrl: ctrl}
	mock.recorder = &MockTagReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagReaderWriter) EXPECT() *MockTagReaderWriterMockRecorder {
	return m.recorder
}

// CreateOrUpdateTag mocks base method.
func (m *MockTagReaderWriter) CreateOrUpdateTag(tag *Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateTag indicates an expected call of CreateOrUpdateTag.
func (mr *MockTagReaderWriterMockRecorder) CreateOrUpdateTag(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateTag", reflect.TypeOf((*MockTagReaderWriter)(nil).CreateOrUpdateTag), tag)
}

// GetAllTags mocks base method.
func (m *MockTagReaderWriter) GetAllTags() (*[]Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTags")
	ret0, _ := ret[0].(*[]Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTags indicates an expected call of GetAllTags.
func (mr *MockTagReaderWriterMockRecorder) GetAllTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTags", reflect.TypeOf((*MockTagReaderWriter)(nil).GetAllTags))
}

// GetTag mocks base method.
func (m *MockTagReaderWriter) GetTag(conds ...any) (*Tag, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTag", varargs...)
	ret0, _ := ret[0].(*Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockTagReaderWriterMockRecorder) GetTag(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockTagReaderWriter)(nil).GetTag), conds...)
}

// GetTags mocks base method.
func (m *MockTagReaderWriter) GetTags(conds ...any) (*[]Tag, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*[]Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockTagReaderWriterMockRecorder) GetTags(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockTagReaderWriter)(nil).GetTags), conds...)
}

// RemoveTag mocks base method.
func (m *MockTagReaderWriter) RemoveTag(tagId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTag", tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTag indicates an expected call of RemoveTag.
func (mr *MockTagReaderWriterMockRecorder) RemoveTag(tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockTagReaderWriter)(nil).RemoveTag), tagId)
}

// RemoveTagImageFromTag mocks base method.
func (m *MockTagReaderWriter) RemoveTagImageFromTag(tagId, imageId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagImageFromTag", tagId, imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagImageFromTag indicates an expected call of RemoveTagImageFromTag.
func (mr *MockTagReaderWriterMockRecorder) RemoveTagImageFromTag(tagId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagImageFromTag", reflect.TypeOf((*MockTagReaderWriter)(nil).RemoveTagImageFromTag), tagId, imageId)
}

// UpdateTag mocks base method.
func (m *MockTagReaderWriter) UpdateTag(tag *Tag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", tag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockTagReaderWriterMockRecorder) UpdateTag(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockTagReaderWriter)(nil).UpdateTag), tag)
}

// MockTagAnnotationReader is a mock of TagAnnotationReader interface.
type MockTagAnnotationReader struct {
	ctrl     *gomock.Controller
	recorder *MockTagAnnotationReaderMockRecorder
	isgomock struct{}
}

// MockTagAnnotationReaderMockRecorder is the mock recorder for MockTagAnnotationReader.
type MockTagAnnotationReaderMockRecorder struct {
	mock *MockTagAnnotationReader
}

// NewMockTagAnnotationReader creates a new mock instance.
func NewMockTagAnnotationReader(ctrl *gomock.Controller) *MockTagAnnotationReader {
	mock := &MockTagAnnotationReader{ctrl: ctrl}
	mock.recorder = &MockTagAnnotationReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagAnnotationReader) EXPECT() *MockTagAnnotationReaderMockRecorder {
	return m.recorder
}

// GetTagAnnotation mocks base method.
func (m *MockTagAnnotationReader) GetTagAnnotation(conds ...any) (*TagAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagAnnotation", varargs...)
	ret0, _ := ret[0].(*TagAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagAnnotation indicates an expected call of GetTagAnnotation.
func (mr *MockTagAnnotationReaderMockRecorder) GetTagAnnotation(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagAnnotation", reflect.TypeOf((*MockTagAnnotationReader)(nil).GetTagAnnotation), conds...)
}

// GetTagAnnotations mocks base method.
func (m *MockTagAnnotationReader) GetTagAnnotations(tagId uint64) ([]TagAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagAnnotations", tagId)
	ret0, _ := ret[0].([]TagAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagAnnotations indicates an expected call of GetTagAnnotations.
func (mr *MockTagAnnotationReaderMockRecorder) GetTagAnnotations(tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagAnnotations", reflect.TypeOf((*MockTagAnnotationReader)(nil).GetTagAnnotations), tagId)
}

// MockTagAnnotationWriter is a mock of TagAnnotationWriter interface.
type MockTagAnnotationWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTagAnnotationWriterMockRecorder
	isgomock struct{}
}

// MockTagAnnotationWriterMockRecorder is the mock recorder for MockTagAnnotationWriter.
type MockTagAnnotationWriterMockRecorder struct {
	mock *MockTagAnnotationWriter
}

// NewMockTagAnnotationWriter creates a new mock instance.
func NewMockTagAnnotationWriter(ctrl *gomock.Controller) *MockTagAnnotationWriter {
	mock := &MockTagAnnotationWriter{ctrl: ctrl}
	mock.recorder = &MockTagAnnotationWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagAnnotationWriter) EXPECT() *MockTagAnnotationWriterMockRecorder {
	return m.recorder
}

// CreateTagAnnotation mocks base method.
func (m *MockTagAnnotationWriter) CreateTagAnnotation(tagAnnotation *TagAnnotation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagAnnotation", tagAnnotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTagAnnotation indicates an expected call of CreateTagAnnotation.
func (mr *MockTagAnnotationWriterMockRecorder) CreateTagAnnotation(tagAnnotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagAnnotation", reflect.TypeOf((*MockTagAnnotationWriter)(nil).CreateTagAnnotation), tagAnnotation)
}

// RemoveTag mocks base method.
func (m *MockTagAnnotationWriter) RemoveTag(tagId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTag", tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTag indicates an expected call of RemoveTag.
func (mr *MockTagAnnotationWriterMockRecorder) RemoveTag(tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockTagAnnotationWriter)(nil).RemoveTag), tagId)
}

// RemoveTagAnnotationFromTag mocks base method.
func (m *MockTagAnnotationWriter) RemoveTagAnnotationFromTag(tagId, annotationId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagAnnotationFromTag", tagId, annotationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagAnnotationFromTag indicates an expected call of RemoveTagAnnotationFromTag.
func (mr *MockTagAnnotationWriterMockRecorder) RemoveTagAnnotationFromTag(tagId, annotationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagAnnotationFromTag", reflect.TypeOf((*MockTagAnnotationWriter)(nil).RemoveTagAnnotationFromTag), tagId, annotationId)
}

// MockTagAnnotationReaderWriter is a mock of TagAnnotationReaderWriter interface.
type MockTagAnnotationReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTagAnnotationReaderWriterMockRecorder
	isgomock struct{}
}

// MockTagAnnotationReaderWriterMockRecorder is the mock recorder for MockTagAnnotationReaderWriter.
type MockTagAnnotationReaderWriterMockRecorder struct {
	mock *MockTagAnnotationReaderWriter
}

// NewMockTagAnnotationReaderWriter creates a new mock instance.
func NewMockTagAnnotationReaderWriter(ctrl *gomock.Controller) *MockTagAnnotationReaderWriter {
	mock := &MockTagAnnotationReaderWriter{ctrl: ctrl}
	mock.recorder = &MockTagAnnotationReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagAnnotationReaderWriter) EXPECT() *MockTagAnnotationReaderWriterMockRecorder {
	return m.recorder
}

// CreateTagAnnotation mocks base method.
func (m *MockTagAnnotationReaderWriter) CreateTagAnnotation(tagAnnotation *TagAnnotation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTagAnnotation", tagAnnotation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTagAnnotation indicates an expected call of CreateTagAnnotation.
func (mr *MockTagAnnotationReaderWriterMockRecorder) CreateTagAnnotation(tagAnnotation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTagAnnotation", reflect.TypeOf((*MockTagAnnotationReaderWriter)(nil).CreateTagAnnotation), tagAnnotation)
}

// GetTagAnnotation mocks base method.
func (m *MockTagAnnotationReaderWriter) GetTagAnnotation(conds ...any) (*TagAnnotation, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagAnnotation", varargs...)
	ret0, _ := ret[0].(*TagAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagAnnotation indicates an expected call of GetTagAnnotation.
func (mr *MockTagAnnotationReaderWriterMockRecorder) GetTagAnnotation(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagAnnotation", reflect.TypeOf((*MockTagAnnotationReaderWriter)(nil).GetTagAnnotation), conds...)
}

// GetTagAnnotations mocks base method.
func (m *MockTagAnnotationReaderWriter) GetTagAnnotations(tagId uint64) ([]TagAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagAnnotations", tagId)
	ret0, _ := ret[0].([]TagAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagAnnotations indicates an expected call of GetTagAnnotations.
func (mr *MockTagAnnotationReaderWriterMockRecorder) GetTagAnnotations(tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagAnnotations", reflect.TypeOf((*MockTagAnnotationReaderWriter)(nil).GetTagAnnotations), tagId)
}

// RemoveTag mocks base method.
func (m *MockTagAnnotationReaderWriter) RemoveTag(tagId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTag", tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTag indicates an expected call of RemoveTag.
func (mr *MockTagAnnotationReaderWriterMockRecorder) RemoveTag(tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockTagAnnotationReaderWriter)(nil).RemoveTag), tagId)
}

// RemoveTagAnnotationFromTag mocks base method.
func (m *MockTagAnnotationReaderWriter) RemoveTagAnnotationFromTag(tagId, annotationId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagAnnotationFromTag", tagId, annotationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagAnnotationFromTag indicates an expected call of RemoveTagAnnotationFromTag.
func (mr *MockTagAnnotationReaderWriterMockRecorder) RemoveTagAnnotationFromTag(tagId, annotationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagAnnotationFromTag", reflect.TypeOf((*MockTagAnnotationReaderWriter)(nil).RemoveTagAnnotationFromTag), tagId, annotationId)
}

// MockDirectoryReader is a mock of DirectoryReader interface.
type MockDirectoryReader struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryReaderMockRecorder
	isgomock struct{}
}

// MockDirectoryReaderMockRecorder is the mock recorder for MockDirectoryReader.
type MockDirectoryReaderMockRecorder struct {
	mock *MockDirectoryReader
}

// NewMockDirectoryReader creates a new mock instance.
func NewMockDirectoryReader(ctrl *gomock.Controller) *MockDirectoryReader {
	mock := &MockDirectoryReader{ctrl: ctrl}
	mock.recorder = &MockDirectoryReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryReader) EXPECT() *MockDirectoryReaderMockRecorder {
	return m.recorder
}

// GetAllDirectories mocks base method.
func (m *MockDirectoryReader) GetAllDirectories() (*[]Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDirectories")
	ret0, _ := ret[0].(*[]Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDirectories indicates an expected call of GetAllDirectories.
func (mr *MockDirectoryReaderMockRecorder) GetAllDirectories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDirectories", reflect.TypeOf((*MockDirectoryReader)(nil).GetAllDirectories))
}

// GetDirectories mocks base method.
func (m *MockDirectoryReader) GetDirectories(conds ...any) (*[]Directory, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDirectories", varargs...)
	ret0, _ := ret[0].(*[]Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectories indicates an expected call of GetDirectories.
func (mr *MockDirectoryReaderMockRecorder) GetDirectories(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectories", reflect.TypeOf((*MockDirectoryReader)(nil).GetDirectories), conds...)
}

// GetDirectory mocks base method.
func (m *MockDirectoryReader) GetDirectory(conds ...any) (*Directory, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDirectory", varargs...)
	ret0, _ := ret[0].(*Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectory indicates an expected call of GetDirectory.
func (mr *MockDirectoryReaderMockRecorder) GetDirectory(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectory", reflect.TypeOf((*MockDirectoryReader)(nil).GetDirectory), conds...)
}

// MockDirectoryWriter is a mock of DirectoryWriter interface.
type MockDirectoryWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryWriterMockRecorder
	isgomock struct{}
}

// MockDirectoryWriterMockRecorder is the mock recorder for MockDirectoryWriter.
type MockDirectoryWriterMockRecorder struct {
	mock *MockDirectoryWriter
}

// NewMockDirectoryWriter creates a new mock instance.
func NewMockDirectoryWriter(ctrl *gomock.Controller) *MockDirectoryWriter {
	mock := &MockDirectoryWriter{ctrl: ctrl}
	mock.recorder = &MockDirectoryWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryWriter) EXPECT() *MockDirectoryWriterMockRecorder {
	return m.recorder
}

// CreateOrUpdateDirectory mocks base method.
func (m *MockDirectoryWriter) CreateOrUpdateDirectory(directory *Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateDirectory", directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateDirectory indicates an expected call of CreateOrUpdateDirectory.
func (mr *MockDirectoryWriterMockRecorder) CreateOrUpdateDirectory(directory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDirectory", reflect.TypeOf((*MockDirectoryWriter)(nil).CreateOrUpdateDirectory), directory)
}

// RemoveDirectory mocks base method.
func (m *MockDirectoryWriter) RemoveDirectory(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDirectory", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDirectory indicates an expected call of RemoveDirectory.
func (mr *MockDirectoryWriterMockRecorder) RemoveDirectory(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDirectory", reflect.TypeOf((*MockDirectoryWriter)(nil).RemoveDirectory), path)
}

// RemoveTagFromDirectory mocks base method.
func (m *MockDirectoryWriter) RemoveTagFromDirectory(direcotryPath string, tagId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagFromDirectory", direcotryPath, tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagFromDirectory indicates an expected call of RemoveTagFromDirectory.
func (mr *MockDirectoryWriterMockRecorder) RemoveTagFromDirectory(direcotryPath, tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagFromDirectory", reflect.TypeOf((*MockDirectoryWriter)(nil).RemoveTagFromDirectory), direcotryPath, tagId)
}

// UpdateDirectory mocks base method.
func (m *MockDirectoryWriter) UpdateDirectory(directory *Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDirectory", directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDirectory indicates an expected call of UpdateDirectory.
func (mr *MockDirectoryWriterMockRecorder) UpdateDirectory(directory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDirectory", reflect.TypeOf((*MockDirectoryWriter)(nil).UpdateDirectory), directory)
}

// MockDirectoryReaderWriter is a mock of DirectoryReaderWriter interface.
type MockDirectoryReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryReaderWriterMockRecorder
	isgomock struct{}
}

// MockDirectoryReaderWriterMockRecorder is the mock recorder for MockDirectoryReaderWriter.
type MockDirectoryReaderWriterMockRecorder struct {
	mock *MockDirectoryReaderWriter
}

// NewMockDirectoryReaderWriter creates a new mock instance.
func NewMockDirectoryReaderWriter(ctrl *gomock.Controller) *MockDirectoryReaderWriter {
	mock := &MockDirectoryReaderWriter{ctrl: ctrl}
	mock.recorder = &MockDirectoryReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryReaderWriter) EXPECT() *MockDirectoryReaderWriterMockRecorder {
	return m.recorder
}

// CreateOrUpdateDirectory mocks base method.
func (m *MockDirectoryReaderWriter) CreateOrUpdateDirectory(directory *Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateDirectory", directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateDirectory indicates an expected call of CreateOrUpdateDirectory.
func (mr *MockDirectoryReaderWriterMockRecorder) CreateOrUpdateDirectory(directory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateDirectory", reflect.TypeOf((*MockDirectoryReaderWriter)(nil).CreateOrUpdateDirectory), directory)
}

// GetAllDirectories mocks base method.
func (m *MockDirectoryReaderWriter) GetAllDirectories() (*[]Directory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDirectories")
	ret0, _ := ret[0].(*[]Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDirectories indicates an expected call of GetAllDirectories.
func (mr *MockDirectoryReaderWriterMockRecorder) GetAllDirectories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDirectories", reflect.TypeOf((*MockDirectoryReaderWriter)(nil).GetAllDirectories))
}

// GetDirectories mocks base method.
func (m *MockDirectoryReaderWriter) GetDirectories(conds ...any) (*[]Directory, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDirectories", varargs...)
	ret0, _ := ret[0].(*[]Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectories indicates an expected call of GetDirectories.
func (mr *MockDirectoryReaderWriterMockRecorder) GetDirectories(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectories", reflect.TypeOf((*MockDirectoryReaderWriter)(nil).GetDirectories), conds...)
}

// GetDirectory mocks base method.
func (m *MockDirectoryReaderWriter) GetDirectory(conds ...any) (*Directory, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDirectory", varargs...)
	ret0, _ := ret[0].(*Directory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectory indicates an expected call of GetDirectory.
func (mr *MockDirectoryReaderWriterMockRecorder) GetDirectory(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectory", reflect.TypeOf((*MockDirectoryReaderWriter)(nil).GetDirectory), conds...)
}

// RemoveDirectory mocks base method.
func (m *MockDirectoryReaderWriter) RemoveDirectory(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDirectory", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDirectory indicates an expected call of RemoveDirectory.
func (mr *MockDirectoryReaderWriterMockRecorder) RemoveDirectory(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDirectory", reflect.TypeOf((*MockDirectoryReaderWriter)(nil).RemoveDirectory), path)
}

// RemoveTagFromDirectory mocks base method.
func (m *MockDirectoryReaderWriter) RemoveTagFromDirectory(direcotryPath string, tagId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTagFromDirectory", direcotryPath, tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTagFromDirectory indicates an expected call of RemoveTagFromDirectory.
func (mr *MockDirectoryReaderWriterMockRecorder) RemoveTagFromDirectory(direcotryPath, tagId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTagFromDirectory", reflect.TypeOf((*MockDirectoryReaderWriter)(nil).RemoveTagFromDirectory), direcotryPath, tagId)
}

// UpdateDirectory mocks base method.
func (m *MockDirectoryReaderWriter) UpdateDirectory(directory *Directory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDirectory", directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDirectory indicates an expected call of UpdateDirectory.
func (mr *MockDirectoryReaderWriterMockRecorder) UpdateDirectory(directory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDirectory", reflect.TypeOf((*MockDirectoryReaderWriter)(nil).UpdateDirectory), directory)
}

// MockTagImageTypeReaderWriter is a mock of TagImageTypeReaderWriter interface.
type MockTagImageTypeReaderWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTagImageTypeReaderWriterMockRecorder
	isgomock struct{}
}

// MockTagImageTypeReaderWriterMockRecorder is the mock recorder for MockTagImageTypeReaderWriter.
type MockTagImageTypeReaderWriterMockRecorder struct {
	mock *MockTagImageTypeReaderWriter
}

// NewMockTagImageTypeReaderWriter creates a new mock instance.
func NewMockTagImageTypeReaderWriter(ctrl *gomock.Controller) *MockTagImageTypeReaderWriter {
	mock := &MockTagImageTypeReaderWriter{ctrl: ctrl}
	mock.recorder = &MockTagImageTypeReaderWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagImageTypeReaderWriter) EXPECT() *MockTagImageTypeReaderWriterMockRecorder {
	return m.recorder
}

// CreateOrUpdateTagImageType mocks base method.
func (m *MockTagImageTypeReaderWriter) CreateOrUpdateTagImageType(tit *TagImageType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateTagImageType", tit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateTagImageType indicates an expected call of CreateOrUpdateTagImageType.
func (mr *MockTagImageTypeReaderWriterMockRecorder) CreateOrUpdateTagImageType(tit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateTagImageType", reflect.TypeOf((*MockTagImageTypeReaderWriter)(nil).CreateOrUpdateTagImageType), tit)
}

// GetTagImageType mocks base method.
func (m *MockTagImageTypeReaderWriter) GetTagImageType(conds ...any) (*TagImageType, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTagImageType", varargs...)
	ret0, _ := ret[0].(*TagImageType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagImageType indicates an expected call of GetTagImageType.
func (mr *MockTagImageTypeReaderWriterMockRecorder) GetTagImageType(conds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagImageType", reflect.TypeOf((*MockTagImageTypeReaderWriter)(nil).GetTagImageType), conds...)
}

// MockTagImageWriter is a mock of TagImageWriter interface.
type MockTagImageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTagImageWriterMockRecorder
	isgomock struct{}
}

// MockTagImageWriterMockRecorder is the mock recorder for MockTagImageWriter.
type MockTagImageWriterMockRecorder struct {
	mock *MockTagImageWriter
}

// NewMockTagImageWriter creates a new mock instance.
func NewMockTagImageWriter(ctrl *gomock.Controller) *MockTagImageWriter {
	mock := &MockTagImageWriter{ctrl: ctrl}
	mock.recorder = &MockTagImageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTagImageWriter) EXPECT() *MockTagImageWriterMockRecorder {
	return m.recorder
}

// UpdateTagImage mocks base method.
func (m *MockTagImageWriter) UpdateTagImage(image *TagImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTagImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTagImage indicates an expected call of UpdateTagImage.
func (mr *MockTagImageWriterMockRecorder) UpdateTagImage(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTagImage", reflect.TypeOf((*MockTagImageWriter)(nil).UpdateTagImage), image)
}

// MockThumbnailProcessor is a mock of ThumbnailProcessor interface.
type MockThumbnailProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockThumbnailProcessorMockRecorder
	isgomock struct{}
}

// MockThumbnailProcessorMockRecorder is the mock recorder for MockThumbnailProcessor.
type MockThumbnailProcessorMockRecorder struct {
	mock *MockThumbnailProcessor
}

// NewMockThumbnailProcessor creates a new mock instance.
func NewMockThumbnailProcessor(ctrl *gomock.Controller) *MockThumbnailProcessor {
	mock := &MockThumbnailProcessor{ctrl: ctrl}
	mock.recorder = &MockThumbnailProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThumbnailProcessor) EXPECT() *MockThumbnailProcessorMockRecorder {
	return m.recorder
}

// ProcessThumbnail mocks base method.
func (m *MockThumbnailProcessor) ProcessThumbnail(image *TagImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessThumbnail", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessThumbnail indicates an expected call of ProcessThumbnail.
func (mr *MockThumbnailProcessorMockRecorder) ProcessThumbnail(image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessThumbnail", reflect.TypeOf((*MockThumbnailProcessor)(nil).ProcessThumbnail), image)
}

// MockStorageUploader is a mock of StorageUploader interface.
type MockStorageUploader struct {
	ctrl     *gomock.Controller
	recorder *MockStorageUploaderMockRecorder
	isgomock struct{}
}

// MockStorageUploaderMockRecorder is the mock recorder for MockStorageUploader.
type MockStorageUploaderMockRecorder struct {
	mock *MockStorageUploader
}

// NewMockStorageUploader creates a new mock instance.
func NewMockStorageUploader(ctrl *gomock.Controller) *MockStorageUploader {
	mock := &MockStorageUploader{ctrl: ctrl}
	mock.recorder = &MockStorageUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageUploader) EXPECT() *MockStorageUploaderMockRecorder {
	return m.recorder
}

// GetFileForWriting mocks base method.
func (m *MockStorageUploader) GetFileForWriting(name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileForWriting", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileForWriting indicates an expected call of GetFileForWriting.
func (mr *MockStorageUploaderMockRecorder) GetFileForWriting(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileForWriting", reflect.TypeOf((*MockStorageUploader)(nil).GetFileForWriting), name)
}

// GetStorageUrl mocks base method.
func (m *MockStorageUploader) GetStorageUrl(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageUrl", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStorageUrl indicates an expected call of GetStorageUrl.
func (mr *MockStorageUploaderMockRecorder) GetStorageUrl(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageUrl", reflect.TypeOf((*MockStorageUploader)(nil).GetStorageUrl), name)
}

// GetTempFile mocks base method.
func (m *MockStorageUploader) GetTempFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTempFile indicates an expected call of GetTempFile.
func (mr *MockStorageUploaderMockRecorder) GetTempFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempFile", reflect.TypeOf((*MockStorageUploader)(nil).GetTempFile))
}

// MockTempFileProvider is a mock of TempFileProvider interface.
type MockTempFileProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTempFileProviderMockRecorder
	isgomock struct{}
}

// MockTempFileProviderMockRecorder is the mock recorder for MockTempFileProvider.
type MockTempFileProviderMockRecorder struct {
	mock *MockTempFileProvider
}

// NewMockTempFileProvider creates a new mock instance.
func NewMockTempFileProvider(ctrl *gomock.Controller) *MockTempFileProvider {
	mock := &MockTempFileProvider{ctrl: ctrl}
	mock.recorder = &MockTempFileProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTempFileProvider) EXPECT() *MockTempFileProviderMockRecorder {
	return m.recorder
}

// GetTempFile mocks base method.
func (m *MockTempFileProvider) GetTempFile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTempFile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTempFile indicates an expected call of GetTempFile.
func (mr *MockTempFileProviderMockRecorder) GetTempFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTempFile", reflect.TypeOf((*MockTempFileProvider)(nil).GetTempFile))
}

// MockDirectoryItemsGetter is a mock of DirectoryItemsGetter interface.
type MockDirectoryItemsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryItemsGetterMockRecorder
	isgomock struct{}
}

// MockDirectoryItemsGetterMockRecorder is the mock recorder for MockDirectoryItemsGetter.
type MockDirectoryItemsGetterMockRecorder struct {
	mock *MockDirectoryItemsGetter
}

// NewMockDirectoryItemsGetter creates a new mock instance.
func NewMockDirectoryItemsGetter(ctrl *gomock.Controller) *MockDirectoryItemsGetter {
	mock := &MockDirectoryItemsGetter{ctrl: ctrl}
	mock.recorder = &MockDirectoryItemsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryItemsGetter) EXPECT() *MockDirectoryItemsGetterMockRecorder {
	return m.recorder
}

// GetBelongingItem mocks base method.
func (m *MockDirectoryItemsGetter) GetBelongingItem(path, filename string) (*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBelongingItem", path, filename)
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBelongingItem indicates an expected call of GetBelongingItem.
func (mr *MockDirectoryItemsGetterMockRecorder) GetBelongingItem(path, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBelongingItem", reflect.TypeOf((*MockDirectoryItemsGetter)(nil).GetBelongingItem), path, filename)
}

// GetBelongingItems mocks base method.
func (m *MockDirectoryItemsGetter) GetBelongingItems(path string) (*[]Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBelongingItems", path)
	ret0, _ := ret[0].(*[]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBelongingItems indicates an expected call of GetBelongingItems.
func (mr *MockDirectoryItemsGetterMockRecorder) GetBelongingItems(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBelongingItems", reflect.TypeOf((*MockDirectoryItemsGetter)(nil).GetBelongingItems), path)
}

// MockDirectoryItemsSetter is a mock of DirectoryItemsSetter interface.
type MockDirectoryItemsSetter struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryItemsSetterMockRecorder
	isgomock struct{}
}

// MockDirectoryItemsSetterMockRecorder is the mock recorder for MockDirectoryItemsSetter.
type MockDirectoryItemsSetterMockRecorder struct {
	mock *MockDirectoryItemsSetter
}

// NewMockDirectoryItemsSetter creates a new mock instance.
func NewMockDirectoryItemsSetter(ctrl *gomock.Controller) *MockDirectoryItemsSetter {
	mock := &MockDirectoryItemsSetter{ctrl: ctrl}
	mock.recorder = &MockDirectoryItemsSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryItemsSetter) EXPECT() *MockDirectoryItemsSetterMockRecorder {
	return m.recorder
}

// AddBelongingItem mocks base method.
func (m *MockDirectoryItemsSetter) AddBelongingItem(item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBelongingItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBelongingItem indicates an expected call of AddBelongingItem.
func (mr *MockDirectoryItemsSetterMockRecorder) AddBelongingItem(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBelongingItem", reflect.TypeOf((*MockDirectoryItemsSetter)(nil).AddBelongingItem), item)
}

// MockDirectoryItemsGetterSetter is a mock of DirectoryItemsGetterSetter interface.
type MockDirectoryItemsGetterSetter struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryItemsGetterSetterMockRecorder
	isgomock struct{}
}

// MockDirectoryItemsGetterSetterMockRecorder is the mock recorder for MockDirectoryItemsGetterSetter.
type MockDirectoryItemsGetterSetterMockRecorder struct {
	mock *MockDirectoryItemsGetterSetter
}

// NewMockDirectoryItemsGetterSetter creates a new mock instance.
func NewMockDirectoryItemsGetterSetter(ctrl *gomock.Controller) *MockDirectoryItemsGetterSetter {
	mock := &MockDirectoryItemsGetterSetter{ctrl: ctrl}
	mock.recorder = &MockDirectoryItemsGetterSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryItemsGetterSetter) EXPECT() *MockDirectoryItemsGetterSetterMockRecorder {
	return m.recorder
}

// AddBelongingItem mocks base method.
func (m *MockDirectoryItemsGetterSetter) AddBelongingItem(item *Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBelongingItem", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBelongingItem indicates an expected call of AddBelongingItem.
func (mr *MockDirectoryItemsGetterSetterMockRecorder) AddBelongingItem(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBelongingItem", reflect.TypeOf((*MockDirectoryItemsGetterSetter)(nil).AddBelongingItem), item)
}

// GetBelongingItem mocks base method.
func (m *MockDirectoryItemsGetterSetter) GetBelongingItem(path, filename string) (*Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBelongingItem", path, filename)
	ret0, _ := ret[0].(*Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBelongingItem indicates an expected call of GetBelongingItem.
func (mr *MockDirectoryItemsGetterSetterMockRecorder) GetBelongingItem(path, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBelongingItem", reflect.TypeOf((*MockDirectoryItemsGetterSetter)(nil).GetBelongingItem), path, filename)
}

// GetBelongingItems mocks base method.
func (m *MockDirectoryItemsGetterSetter) GetBelongingItems(path string) (*[]Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBelongingItems", path)
	ret0, _ := ret[0].(*[]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBelongingItems indicates an expected call of GetBelongingItems.
func (mr *MockDirectoryItemsGetterSetterMockRecorder) GetBelongingItems(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBelongingItems", reflect.TypeOf((*MockDirectoryItemsGetterSetter)(nil).GetBelongingItems), path)
}

// MockDirectoryConcreteTagsGetter is a mock of DirectoryConcreteTagsGetter interface.
type MockDirectoryConcreteTagsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryConcreteTagsGetterMockRecorder
	isgomock struct{}
}

// MockDirectoryConcreteTagsGetterMockRecorder is the mock recorder for MockDirectoryConcreteTagsGetter.
type MockDirectoryConcreteTagsGetterMockRecorder struct {
	mock *MockDirectoryConcreteTagsGetter
}

// NewMockDirectoryConcreteTagsGetter creates a new mock instance.
func NewMockDirectoryConcreteTagsGetter(ctrl *gomock.Controller) *MockDirectoryConcreteTagsGetter {
	mock := &MockDirectoryConcreteTagsGetter{ctrl: ctrl}
	mock.recorder = &MockDirectoryConcreteTagsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryConcreteTagsGetter) EXPECT() *MockDirectoryConcreteTagsGetterMockRecorder {
	return m.recorder
}

// GetConcreteTags mocks base method.
func (m *MockDirectoryConcreteTagsGetter) GetConcreteTags(path string) ([]*Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConcreteTags", path)
	ret0, _ := ret[0].([]*Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConcreteTags indicates an expected call of GetConcreteTags.
func (mr *MockDirectoryConcreteTagsGetterMockRecorder) GetConcreteTags(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConcreteTags", reflect.TypeOf((*MockDirectoryConcreteTagsGetter)(nil).GetConcreteTags), path)
}

// MockFileMetadataGetter is a mock of FileMetadataGetter interface.
type MockFileMetadataGetter struct {
	ctrl     *gomock.Controller
	recorder *MockFileMetadataGetterMockRecorder
	isgomock struct{}
}

// MockFileMetadataGetterMockRecorder is the mock recorder for MockFileMetadataGetter.
type MockFileMetadataGetterMockRecorder struct {
	mock *MockFileMetadataGetter
}

// NewMockFileMetadataGetter creates a new mock instance.
func NewMockFileMetadataGetter(ctrl *gomock.Controller) *MockFileMetadataGetter {
	mock := &MockFileMetadataGetter{ctrl: ctrl}
	mock.recorder = &MockFileMetadataGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMetadataGetter) EXPECT() *MockFileMetadataGetterMockRecorder {
	return m.recorder
}

// GetFileMetadata mocks base method.
func (m *MockFileMetadataGetter) GetFileMetadata(f string) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetadata", f)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFileMetadata indicates an expected call of GetFileMetadata.
func (mr *MockFileMetadataGetterMockRecorder) GetFileMetadata(f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetadata", reflect.TypeOf((*MockFileMetadataGetter)(nil).GetFileMetadata), f)
}

// MockDirectoryChangedCallback is a mock of DirectoryChangedCallback interface.
type MockDirectoryChangedCallback struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryChangedCallbackMockRecorder
	isgomock struct{}
}

// MockDirectoryChangedCallbackMockRecorder is the mock recorder for MockDirectoryChangedCallback.
type MockDirectoryChangedCallbackMockRecorder struct {
	mock *MockDirectoryChangedCallback
}

// NewMockDirectoryChangedCallback creates a new mock instance.
func NewMockDirectoryChangedCallback(ctrl *gomock.Controller) *MockDirectoryChangedCallback {
	mock := &MockDirectoryChangedCallback{ctrl: ctrl}
	mock.recorder = &MockDirectoryChangedCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryChangedCallback) EXPECT() *MockDirectoryChangedCallbackMockRecorder {
	return m.recorder
}

// DirectoryChanged mocks base method.
func (m *MockDirectoryChangedCallback) DirectoryChanged() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DirectoryChanged")
}

// DirectoryChanged indicates an expected call of DirectoryChanged.
func (mr *MockDirectoryChangedCallbackMockRecorder) DirectoryChanged() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectoryChanged", reflect.TypeOf((*MockDirectoryChangedCallback)(nil).DirectoryChanged))
}

// MockCurrentTimeGetter is a mock of CurrentTimeGetter interface.
type MockCurrentTimeGetter struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentTimeGetterMockRecorder
	isgomock struct{}
}

// MockCurrentTimeGetterMockRecorder is the mock recorder for MockCurrentTimeGetter.
type MockCurrentTimeGetterMockRecorder struct {
	mock *MockCurrentTimeGetter
}

// NewMockCurrentTimeGetter creates a new mock instance.
func NewMockCurrentTimeGetter(ctrl *gomock.Controller) *MockCurrentTimeGetter {
	mock := &MockCurrentTimeGetter{ctrl: ctrl}
	mock.recorder = &MockCurrentTimeGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentTimeGetter) EXPECT() *MockCurrentTimeGetterMockRecorder {
	return m.recorder
}

// GetCurrentTime mocks base method.
func (m *MockCurrentTimeGetter) GetCurrentTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCurrentTime indicates an expected call of GetCurrentTime.
func (mr *MockCurrentTimeGetterMockRecorder) GetCurrentTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentTime", reflect.TypeOf((*MockCurrentTimeGetter)(nil).GetCurrentTime))
}
